!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self)["ws-utils"]=t()}(this,(function(){"use strict";return class{url;ws;reconnectInterval;maxReconnectInterval;heartbeatInterval;heartbeatTimeout;maxReconnectAttempts;maxHeartbeatTimeouts;heartbeatTimer;reconnectTimer;isReconnecting;reconnectAttempts;heartbeatTimeoutCount;messageQueue;onOpen;onMessage;onClose;onError;heartbeatTimeoutId;constructor(e,t={}){this.url=e,this.ws=null,this.reconnectInterval=t.reconnectInterval||5e3,this.maxReconnectInterval=t.maxReconnectInterval||6e4,this.heartbeatInterval=t.heartbeatInterval||3e4,this.heartbeatTimeout=t.heartbeatTimeout||1e4,this.maxReconnectAttempts=t.maxReconnectAttempts||5,this.maxHeartbeatTimeouts=t.maxHeartbeatTimeouts||3,this.heartbeatTimer=null,this.reconnectTimer=null,this.isReconnecting=!1,this.reconnectAttempts=0,this.heartbeatTimeoutCount=0,this.messageQueue=[],this.onOpen=t.onOpen||(()=>{}),this.onMessage=t.onMessage||(()=>{}),this.onClose=t.onClose||(()=>{}),this.onError=t.onError||(()=>{}),this.connect()}connect(){this.ws=new WebSocket(this.url),this.ws.onopen=()=>{console.log("WebSocket 连接已打开"),this.isReconnecting=!1,this.reconnectAttempts=0,this.heartbeatTimeoutCount=0,this.startHeartbeat(),this.flushMessageQueue(),this.onOpen()},this.ws.onmessage=e=>{console.log("收到消息:",e.data),e.data===JSON.stringify({type:"heartbeat"})&&this.resetHeartbeatTimeout(),this.onMessage(e)},this.ws.onclose=e=>{console.log("WebSocket 连接已关闭",e.code,e.reason),this.stopHeartbeat(),this.onClose(e),!this.isReconnecting&&1e3!==e.code&&1001!==e.code&&this.reconnectAttempts<this.maxReconnectAttempts&&this.reconnect()},this.ws.onerror=e=>{console.error("WebSocket 错误:",e),this.onError(e)}}startHeartbeat(){this.heartbeatTimer=setInterval((()=>{this.ws&&this.ws.readyState===WebSocket.OPEN&&(this.ws.send(JSON.stringify({type:"heartbeat"})),this.setHeartbeatTimeout())}),this.heartbeatInterval)}stopHeartbeat(){clearInterval(this.heartbeatTimer),clearTimeout(this.heartbeatTimeoutId)}setHeartbeatTimeout(){clearTimeout(this.heartbeatTimeoutId),this.heartbeatTimeoutId=setTimeout((()=>{console.log("心跳超时，增加超时计数器"),this.heartbeatTimeoutCount++,this.heartbeatTimeoutCount>=this.maxHeartbeatTimeouts?(console.log("达到最大心跳超时次数，尝试重新连接"),this.ws.close()):this.setHeartbeatTimeout()}),this.heartbeatTimeout)}resetHeartbeatTimeout(){this.heartbeatTimeoutCount=0,this.setHeartbeatTimeout()}reconnect(){this.isReconnecting=!0;const e=Math.min(this.reconnectInterval*Math.pow(2,this.reconnectAttempts),this.maxReconnectInterval);this.reconnectTimer=setTimeout((()=>{console.log(`尝试重新连接...（第 ${this.reconnectAttempts+1} 次）`),this.reconnectAttempts++,this.connect()}),e)}send(e){this.ws&&this.ws.readyState===WebSocket.OPEN?this.ws.send(JSON.stringify(e)):this.messageQueue.push(e)}flushMessageQueue(){for(;this.messageQueue.length>0;){const e=this.messageQueue.shift();this.ws&&this.ws.readyState===WebSocket.OPEN&&this.ws.send(JSON.stringify(e))}}close(){this.ws?.close(1e3,"手动关闭"),this.stopHeartbeat(),clearTimeout(this.reconnectTimer)}}}));
